def function(x):
    # CHANGE YOUR FUNCTION HERE:
    #ROSENBROCK: (x[0]-1)**2 + 100*(x[1]-x[0]**2)**2
    #TEST2: sin(x[0])*cos(x[1])
    #TEST3: -(x[0]*sin(x[1])*(3 - x[0] - x[0]*sin(x[1])) + (x[0]*cos(x[1])*x[0]*sin(x[1]))/2)
    
    return  -(x[0]*sin(x[1])*(3 - x[0] - x[0]*sin(x[1])) + (x[0]*cos(x[1])*x[0]*sin(x[1]))/2)

def grad(f, x):
    h = 1e-5
    gradient = []

    for i, xi in enumerate(x):
        def f_i(x):
            x[i] += h
            fx_plus_h = f(x)
            x[i] -= h
            return fx_plus_h

        partial_derivative = (f_i(x) - f(x)) / h
        gradient.append(partial_derivative)

    return(gradient[0], gradient[1])


def momentum(f, x, iterations, B, A):
    M = vector([0 for i in range(len(x))])
    v = M
    points = []
    for i in range(iterations):
        gradient = vector((grad(function, x)))
        v = B*v - A*gradient
        x = x + v
        points.append(x)
    return x, points



minpoint, all_points = momentum(function(x),vector([-0.1, -0.1]), 30, 0.2, 0.2)

print(minpoint)
x,y = var('x,y')

import matplotlib.pyplot as plt
import numpy as np

# generate a grid of points
x = np.linspace(-10, 10,  100)
y = np.linspace(-10, 10, 100)
X, Y = np.meshgrid(x, y)

# evaluate the function on the grid
Z = function([X, Y])

xs = []
ys = []
for i in range(0, len(all_points)):
    xs.append(all_points[i][-2])

for i in range(0, len(all_points)):
    ys.append(all_points[i][-1])

# plot the contour of the function
plt.contour(X, Y, Z, levels=100)
plt.scatter(minpoint[0], minpoint[1], color = 'red')
plt.plot(xs, ys, color = 'black', linewidth = 0.5)
plt.scatter(xs, ys, color = 'red', s=1)

# show the plot
plt.show()
