def norm(x):
    return sqrt(x[0]^2 + x[1]^2)

def grad(f, x):
    h = 1e-5
    gradient = []

    for i, xi in enumerate(x):
        def f_i(x):
            x[i] += h
            fx_plus_h = f(x)
            x[i] -= h
            return fx_plus_h

        partial_derivative = (f_i(x) - f(x)) / h
        gradient.append(partial_derivative)

    return(gradient[0], gradient[1])

def function(x):
    # CHANGE YOUR FUNCTION HERE:
    #ROSENBROCK: (x[0]-1)**2 + 100*(x[1]-x[0]**2)**2
    #TEST2: sin(x[0])*cos(x[1])
    #TEST3: -(x[0]*sin(x[1])*(3 - x[0] - x[0]*sin(x[1])) + (x[0]*cos(x[1])*x[0]*sin(x[1]))/2)
    return -(x[0]*sin(x[1])*(3 - x[0] - x[0]*sin(x[1])) + (x[0]*cos(x[1])*x[0]*sin(x[1]))/2)

def backtracking_line_search(f, fg, x, direction, step_size, p=0.5, B=10^(-4)):
    y, gradient = function(x), vector((grad(function, x)))

    while (function(list(vector(x) + step_size*direction))) > y + B*step_size*(gradient*direction):
        step_size = step_size * p
    return step_size
def gradient_descent(f, x, step_size, iterations, rounding=5):
    gradient = vector((grad(function, x)))
    gradnorm = norm(gradient)
    direction = -(gradient)/(gradnorm)
    old = new = function(x)
    new_point = x
    all_points = []
    steps_values = []
    for i in range(1, iterations + 1):
        old_point = new
        x = new_point
        gradient = vector((grad(function, x)))
        gradnorm = norm(gradient)
        direction = -gradient/(gradnorm)
        direction = vector([round(i,rounding) for i in direction])
        step = backtracking_line_search(function, gradient, x, direction, step_size)
        steps_values.append(step)
        new_point = vector(x) + step*direction
        new = function(list(new_point))
        all_points.append(list(new_point))
    return new_point, all_points

#print(gradient_descent(function,[2, 2], 2, 100))

minpoint, all_points = gradient_descent(function,[0.5, 0.75], 2, 100)
print(minpoint)

x,y = var('x,y')

import matplotlib.pyplot as plt
import numpy as np


# generate a grid of points
#CHANGE LIMITS
x = np.linspace(0.5, 1.3, 100)
y = np.linspace(0.5, 1.1, 100)
X, Y = np.meshgrid(x, y)

# evaluate the function on the grid
Z = function([X, Y])

xs = []
ys = []
for i in range(0, len(all_points)):
    xs.append(all_points[i][-2])
    
for i in range(0, len(all_points)):
    ys.append(all_points[i][-1])

# plot the contour of the function
plt.contour(X, Y, Z, levels=100)
plt.scatter(minpoint[0], minpoint[1], color = 'red')
plt.plot(xs, ys, color = 'black', linewidth = 0.5)
plt.scatter(xs, ys, color = 'red', s=10)

# show the plot
plt.show()
